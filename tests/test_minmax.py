import pytest

from rolling.minmax import RollingMin, RollingMax

@pytest.mark.parametrize('array,window_size,expected', [
    ([3, 0, 1, 7, 2], 5, [0]),
    ([3, 0, 1, 7, 2], 4, [0, 0]),
    ([3, 0, 1, 7, 2], 3, [0, 0, 1]),
    ([3, 0, 1, 7, 2], 2, [0, 0, 1, 2]),
    ([3, 0, 1, 7, 2], 1, [3, 0, 1, 7, 2]),

    ([-8, 1, 7, -8, -9], 5, [-9]),
    ([-8, 1, 7, -8, -9], 4, [-8, -9]),
    ([-8, 1, 7, -8, -9], 3, [-8, -8, -9]),
    ([-8, 1, 7, -8, -9], 2, [-8, 1, -8, -9]),
    ([-8, 1, 7, -8, -9], 1, [-8, 1, 7, -8, -9]),

    ([8, 1, 0, -3, 9], 5, [-3]),
    ([8, 1, 0, -3, 9], 4, [-3, -3]),
    ([8, 1, 0, -3, 9], 3, [0, -3, -3]),
    ([8, 1, 0, -3, 9], 2, [1, 0, -3, -3]),
    ([8, 1, 0, -3, 9], 1, [8, 1, 0, -3, 9]),

    ([1, 2, 3, 4, 5], 5, [1]),
    ([1, 2, 3, 4, 5], 4, [1, 2]),
    ([1, 2, 3, 4, 5], 3, [1, 2, 3]),
    ([1, 2, 3, 4, 5], 2, [1, 2, 3, 4]),
    ([1, 2, 3, 4, 5], 1, [1, 2, 3, 4, 5]),

    ([5, 4, 3, 2, 1], 5, [1]),
    ([5, 4, 3, 2, 1], 4, [2, 1]),
    ([5, 4, 3, 2, 1], 3, [3, 2, 1]),
    ([5, 4, 3, 2, 1], 2, [4, 3, 2, 1]),
    ([5, 4, 3, 2, 1], 1, [5, 4, 3, 2, 1]),

    ([3, 3, 3, 3, 3], 5, [3]),
    ([3, 3, 3, 3, 3], 4, [3, 3]),
    ([3, 3, 3, 3, 3], 3, [3, 3, 3]),
    ([3, 3, 3, 3, 3], 2, [3, 3, 3, 3]),
    ([3, 3, 3, 3, 3], 1, [3, 3, 3, 3, 3]),
])
def test_rolling_min(array, window_size, expected):
    r = RollingMin(array, window_size)
    assert list(r) == expected

@pytest.mark.parametrize('array,window_size,expected', [
    ([3, 0, 1, 7, 2], 5, [7]),
    ([3, 0, 1, 7, 2], 4, [7, 7]),
    ([3, 0, 1, 7, 2], 3, [3, 7, 7]),
    ([3, 0, 1, 7, 2], 2, [3, 1, 7, 7]),
    ([3, 0, 1, 7, 2], 1, [3, 0, 1, 7, 2]),

    ([-8, 1, 7, -8, -9], 5, [7]),
    ([-8, 1, 7, -8, -9], 4, [7, 7]),
    ([-8, 1, 7, -8, -9], 3, [7, 7, 7]),
    ([-8, 1, 7, -8, -9], 2, [1, 7, 7, -8]),
    ([-8, 1, 7, -8, -9], 1, [-8, 1, 7, -8, -9]),

    ([8, 1, 0, -3, 9], 5, [9]),
    ([8, 1, 0, -3, 9], 4, [8, 9]),
    ([8, 1, 0, -3, 9], 3, [8, 1, 9]),
    ([8, 1, 0, -3, 9], 2, [8, 1, 0, 9]),
    ([8, 1, 0, -3, 9], 1, [8, 1, 0, -3, 9]),

    ([1, 2, 3, 4, 5], 5, [5]),
    ([1, 2, 3, 4, 5], 4, [4, 5]),
    ([1, 2, 3, 4, 5], 3, [3, 4, 5]),
    ([1, 2, 3, 4, 5], 2, [2, 3, 4, 5]),
    ([1, 2, 3, 4, 5], 1, [1, 2, 3, 4, 5]),

    ([5, 4, 3, 2, 1], 5, [5]),
    ([5, 4, 3, 2, 1], 4, [5, 4]),
    ([5, 4, 3, 2, 1], 3, [5, 4, 3]),
    ([5, 4, 3, 2, 1], 2, [5, 4, 3, 2]),
    ([5, 4, 3, 2, 1], 1, [5, 4, 3, 2, 1]),

    ([3, 3, 3, 3, 3], 5, [3]),
    ([3, 3, 3, 3, 3], 4, [3, 3]),
    ([3, 3, 3, 3, 3], 3, [3, 3, 3]),
    ([3, 3, 3, 3, 3], 2, [3, 3, 3, 3]),
    ([3, 3, 3, 3, 3], 1, [3, 3, 3, 3, 3]),
])
def test_rolling_max(array, window_size, expected):
    r = RollingMax(array, window_size)
    assert list(r) == expected

